package mainpackge;

import dbutility.conDB; //import class นอก package
import report.*;
import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import java.awt.BorderLayout;
import java.awt.Dialog;
import java.awt.FlowLayout;
import java.awt.event.KeyEvent;
import java.sql.Array;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import setgetuser.SetGetUser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author nuzromio
 */
public class ProductMFrame extends javax.swing.JFrame {

    DecimalFormat df = new DecimalFormat("#,###.00");
    Connection connection = null;
    Statement statement = null;
    String conResult = null;
    conDB db = new conDB();

    public ProductMFrame() {
        initComponents();
        SetSize();
        showDB();
        setTable();
        txt_idproduct.requestFocus();
    }

    public void SetSize() {
        setSize(1024, 768);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_show = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txt_idproduct = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_nameproduct = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txt_priceproduct = new javax.swing.JTextField();
        rdo_pasri = new javax.swing.JRadioButton();
        rdo_service = new javax.swing.JRadioButton();
        rdo_nopasri = new javax.swing.JRadioButton();
        rdo_noservice = new javax.swing.JRadioButton();
        btn_save = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();
        btn_save3 = new javax.swing.JButton();
        txt_group = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btn_showgroup = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lbl_head = new javax.swing.JLabel();
        btn_print = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1024, 768));
        setResizable(false);

        tb_show.setForeground(new java.awt.Color(51, 51, 51));
        tb_show.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "รหัสสินค้า", "ชื่อสินค้า", "ราคาสินค้า", "VAT", "SERVICE", "กลุ่มสินค้า"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_show.setSelectionBackground(new java.awt.Color(0, 51, 51));
        tb_show.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_showMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb_show);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("รหัสสินค้า :");

        txt_idproduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_idproductActionPerformed(evt);
            }
        });
        txt_idproduct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_idproductKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_idproductKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("ชื่อสินค้า :");

        txt_nameproduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nameproductActionPerformed(evt);
            }
        });
        txt_nameproduct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_nameproductKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_nameproductKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("ราคาสินค้า :");

        txt_priceproduct.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_priceproduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_priceproductMouseClicked(evt);
            }
        });
        txt_priceproduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_priceproductActionPerformed(evt);
            }
        });
        txt_priceproduct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_priceproductKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_priceproductKeyTyped(evt);
            }
        });

        buttonGroup1.add(rdo_pasri);
        rdo_pasri.setSelected(true);
        rdo_pasri.setText("คิดภาษีมูลค่าเพิ่ม");

        buttonGroup2.add(rdo_service);
        rdo_service.setSelected(true);
        rdo_service.setText("คิดค่าบริการ");

        buttonGroup1.add(rdo_nopasri);
        rdo_nopasri.setText("ไม่คิดภาษีมูลค่าเพิ่ม");

        buttonGroup2.add(rdo_noservice);
        rdo_noservice.setText("ไม่คิดค่าบริการ");

        btn_save.setText("บันทึกรายการ");
        btn_save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_saveMouseClicked(evt);
            }
        });
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_delete.setText("ลบรายการ");
        btn_delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_deleteMouseClicked(evt);
            }
        });

        btn_cancel.setText("ยกเลิก");
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        btn_save3.setText("ออก");

        txt_group.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_groupActionPerformed(evt);
            }
        });
        txt_group.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_groupKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_groupKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("กล่มสินค้า :");

        btn_showgroup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/icon.png"))); // NOI18N
        btn_showgroup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_showgroupMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_idproduct, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_nameproduct, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(txt_group, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_showgroup, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(txt_priceproduct, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdo_pasri)
                    .addComponent(rdo_nopasri))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdo_noservice)
                    .addComponent(rdo_service))
                .addGap(94, 94, 94)
                .addComponent(btn_save)
                .addGap(52, 52, 52)
                .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(btn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(btn_save3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_showgroup, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_idproduct, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_nameproduct, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_group, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_priceproduct, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdo_pasri)
                            .addComponent(rdo_service))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdo_nopasri)
                            .addComponent(rdo_noservice)))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_save3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jPanel2.setPreferredSize(new java.awt.Dimension(1024, 79));

        lbl_head.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_head.setText("เพิ่มรายการสินค้า");

        btn_print.setText("พิมพ์");
        btn_print.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_printMouseClicked(evt);
            }
        });
        btn_print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_printActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_head)
                .addGap(345, 345, 345)
                .addComponent(btn_print, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_head, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_print, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(1024, 768));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tb_showMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_showMouseClicked
        int Rowselect = tb_show.getSelectedRow();
        if (evt.getClickCount() == 2) {
            txt_idproduct.setEnabled(false);
            txt_idproduct.setText(tb_show.getValueAt(Rowselect, 0).toString());
            txt_nameproduct.setText(tb_show.getValueAt(Rowselect, 1).toString());
            txt_priceproduct.setText(df.format(Double.parseDouble(tb_show.getValueAt(Rowselect, 2).toString().replace(",", ""))));
            txt_group.setText(tb_show.getValueAt(Rowselect, 5).toString());
            String status_v = tb_show.getValueAt(Rowselect, 3).toString();
            String status_s = tb_show.getValueAt(Rowselect, 4).toString();
            if (status_v.equals("Y") && status_s.equals("Y")) {
                rdo_pasri.setSelected(true);
                rdo_nopasri.setSelected(false);
                rdo_service.setSelected(true);
                rdo_noservice.setSelected(false);
            } else if (status_v.equals("N") && status_s.equals("Y")) {
                rdo_pasri.setSelected(false);
                rdo_nopasri.setSelected(true);
                rdo_service.setSelected(true);
                rdo_noservice.setSelected(false);
            } else if (status_v.equals("Y") && status_s.equals("N")) {
                rdo_pasri.setSelected(true);
                rdo_nopasri.setSelected(false);
                rdo_service.setSelected(false);
                rdo_noservice.setSelected(true);
            } else {
                rdo_pasri.setSelected(false);
                rdo_nopasri.setSelected(true);
                rdo_service.setSelected(false);
                rdo_noservice.setSelected(true);
            }
        }
    }//GEN-LAST:event_tb_showMouseClicked

    private void btn_printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_printActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_printActionPerformed

    private void btn_printMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_printMouseClicked

        ReportCode();

    }//GEN-LAST:event_btn_printMouseClicked

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        clear();
    }//GEN-LAST:event_btn_cancelActionPerformed

    private void btn_deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_deleteMouseClicked
        deleteDB();
    }//GEN-LAST:event_btn_deleteMouseClicked

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
       
    }//GEN-LAST:event_btn_saveActionPerformed

    private void txt_priceproductKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_priceproductKeyTyped
        txt_priceproduct.setHorizontalAlignment(SwingConstants.RIGHT);
        //พิมได้แต่ตัวเลข
        char inputText = evt.getKeyChar();
        if (!(Character.isDigit(inputText)) || (inputText == KeyEvent.VK_BACK_SLASH) || (inputText == KeyEvent.VK_DELETE) || txt_priceproduct.getText().trim().length() >= 10) {
            evt.consume();
        }
        //คำสั่งเมื่อกด Enter
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txt_priceproduct.setText(df.format(Double.parseDouble(txt_priceproduct.getText().trim())));
        }

    }//GEN-LAST:event_txt_priceproductKeyTyped

    private void txt_priceproductKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_priceproductKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
           chkGroup();
        }
    }//GEN-LAST:event_txt_priceproductKeyPressed

    private void txt_priceproductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_priceproductActionPerformed

    }//GEN-LAST:event_txt_priceproductActionPerformed

    private void txt_priceproductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_priceproductMouseClicked

    }//GEN-LAST:event_txt_priceproductMouseClicked

    private void txt_nameproductKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nameproductKeyTyped
        //พิมได้แค่ตัวอักษร
        char inputText = evt.getKeyChar();
        if (Character.isDigit(inputText) || (inputText == KeyEvent.VK_BACK_SLASH) || (inputText == KeyEvent.VK_DELETE) || txt_nameproduct.getText().trim().length() >= 50) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_nameproductKeyTyped

    private void txt_nameproductKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nameproductKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txt_group.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
           chkGroup();
        }
    }//GEN-LAST:event_txt_nameproductKeyPressed

    private void txt_nameproductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nameproductActionPerformed

    }//GEN-LAST:event_txt_nameproductActionPerformed

    private void txt_idproductKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_idproductKeyTyped

        //กรอกได้ไม่เกินกี่ตัว
        if (txt_idproduct.getText().trim().length() >= 13) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_idproductKeyTyped

    private void txt_idproductKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_idproductKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txt_nameproduct.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            chkGroup();
        }
    }//GEN-LAST:event_txt_idproductKeyPressed

    private void txt_idproductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_idproductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_idproductActionPerformed

    private void txt_groupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_groupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_groupActionPerformed

    private void txt_groupKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_groupKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txt_priceproduct.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
           chkGroup();
        }
    }//GEN-LAST:event_txt_groupKeyPressed

    private void txt_groupKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_groupKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_groupKeyTyped

    private void btn_showgroupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_showgroupMouseClicked
        createDialog();
    }//GEN-LAST:event_btn_showgroupMouseClicked

    private void btn_saveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_saveMouseClicked
       chkGroup();
    }//GEN-LAST:event_btn_saveMouseClicked
   
    public void createDialog(){
      try {
            JFrame f = new JFrame();
            DefaultTableModel model = new DefaultTableModel();
           Class.forName(db.cl);
            connection = DriverManager.getConnection(db.co);
            if (connection != null) {
                statement = connection.createStatement();
                String sql = "SELECT * FROM groupfile";
                ResultSet rs = statement.executeQuery(sql);
                model.addColumn("กลุ่มสินค้า");
                model.addColumn("ชื่อกลุ่มสินค้า");
                while (rs != null && rs.next()) {
                    Vector row = new Vector();
                    row.add(rs.getString("gcode"));
                    row.add(rs.getString("gname"));
                    model.addRow(row);
                }
                //create a new jtable
                JTable table = new JTable(model);
               //ห้ามแก้ตาราง
                table.setDefaultEditor(Object.class, null);
                //code double click
                 table.addMouseListener(new java.awt.event.MouseAdapter() {
                        @Override
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            if (evt.getClickCount() == 2) {
                                txt_group.setText(model.getValueAt(table.getSelectedRow(), 0).toString());
                                f.setVisible(false);
                            }
                        }
                   });
                //create a jscrollpane
                JScrollPane sp = new JScrollPane(table);
                // create a dialog Box
                JDialog d = new JDialog(f,"เลือกกลุ่มสินค้า",true); 
                //ให้ jdialog อยู่ตรงกลาง
                d.setLocationRelativeTo(null);
                d.setSize(400,400);
                //ไม่ให้ปรับขนาด dialog
                d.setResizable(false);
                d.setContentPane(sp);
                d.pack();
                d.setVisible(true);
            } else {
                conResult = "Database Connected Failed.";
                System.out.println(conResult);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        try {
            if (statement != null) {
                statement.close();
                connection.close();
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
    
    public void chkGroup(){
          if (txt_idproduct.getText().trim().equals("")) {
            AlertWarning("กรุณากรอกรหัสสินค้า");
        } else if (txt_nameproduct.getText().trim().equals("")) {
            AlertWarning("กรุณากรอกชื่อสินค้า");
        } else if (txt_priceproduct.getText().trim().equals("")) {
            AlertWarning("กรุณากรอกราคา");
        } else if(txt_group.getText().trim().equals("")){
             AlertWarning("กรุณากรอกกลุ่มสินค้า");
        }else if (!rdo_nopasri.isSelected() && !rdo_pasri.isSelected()) {
            AlertWarning("กรุณากรอกเลือกบริการภาษี");
        } else if (!rdo_noservice.isSelected() && !rdo_service.isSelected()) {
            AlertWarning("กรุณากรอกเลือกบริการ service");
        }else{
            String gcode = txt_group.getText().trim();
            try {
                Class.forName(db.cl);
                connection = DriverManager.getConnection(db.co);
                if (connection != null) {
                    statement = connection.createStatement();
                    String sql = "SELECT * FROM groupfile WHERE gcode = '" + gcode + "' ";
                    ResultSet rs = statement.executeQuery(sql);
                    rs.next();
                    if (rs.getRow() == 0) {
                           AlertWarning("กลุ่มสินค้าซ้ำหรือไม่ถูกต้อง");
                    } else {
                            chkDataDB();
                    }
                } else {
                    conResult = "Database Connected Failed.";
                    System.out.println(conResult);
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
            try {
                if (statement != null) {
                    statement.close();
                    connection.close();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
        }
    }
    public void ReportCode() {
        Map params = new HashMap();
        params.put("NameReport", "REPORT TEST");
        params.put("NameCompany", "Rish POS");
        SetGetUser sgu = new SetGetUser();
        params.put("UserName", sgu.getUsername());
        params.put("AppName", "ProductM");
        printreport pr = new printreport();
        pr.viewReport("testReport", params);
    }

    public void chkDataDB() {
          if (txt_idproduct.getText().trim().equals("")) {
            AlertWarning("กรุณากรอกรหัสสินค้า");
        } else if (txt_nameproduct.getText().trim().equals("")) {
            AlertWarning("กรุณากรอกชื่อสินค้า");
        } else if (txt_priceproduct.getText().trim().equals("")) {
            AlertWarning("กรุณากรอกกลุ่มสินค้า");
        } else if(txt_group.getText().trim().equals("")){
            AlertWarning("กรุณากรอกราคา");
        }else if (!rdo_nopasri.isSelected() && !rdo_pasri.isSelected()) {
            AlertWarning("กรุณากรอกเลือกบริการภาษี");
        } else if (!rdo_noservice.isSelected() && !rdo_service.isSelected()) {
            AlertWarning("กรุณากรอกเลือกบริการ service");
        }else{
            String pcode = txt_idproduct.getText().trim();
            try {
                Class.forName(db.cl);
                connection = DriverManager.getConnection(db.co);
                if (connection != null) {
                    statement = connection.createStatement();
                    String sql = "SELECT * FROM product WHERE pcode = '" + pcode + "' ";
                    ResultSet rs = statement.executeQuery(sql);
                    rs.next();
                    if (rs.getRow() == 0) {
                        insertDB();
                    } else {
                        updateDB();
                    }
                } else {
                    conResult = "Database Connected Failed.";
                    System.out.println(conResult);
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
            try {
                if (statement != null) {
                    statement.close();
                    connection.close();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
                e.printStackTrace();
            }

        }
    }
    public void updateDB() {
        try {
            String pgroup = txt_group.getText().trim();
            String pcode = txt_idproduct.getText().trim();
            String pdesc = txt_nameproduct.getText().trim();
            Double price = Double.parseDouble(txt_priceproduct.getText().trim().replace(",", ""));
            String p_vat = null;
            String p_service = null;
            if (rdo_pasri.isSelected()) {
                p_vat = "Y";
            } else if (rdo_nopasri.isSelected()) {
                p_vat = "N";
            }
            if (rdo_service.isSelected()) {
                p_service = "Y";
            } else if (rdo_noservice.isSelected()) {
                p_service = "N";
            }

            Class.forName(db.cl);
            connection = DriverManager.getConnection(db.co);
            if (connection != null) {
                statement = connection.createStatement();
                String sqlupdate = "UPDATE product SET  pdesc='" + pdesc + "',price='" + price + "',p_vat='" + p_vat + "',p_service='" + p_service + "',pgroup='" + pgroup + "' WHERE pcode='" + pcode + "'";
                statement.execute(sqlupdate);
                AlertSuc("บันทึกสำเร็จ");
                clear();
                DefaultTableModel model = (DefaultTableModel) tb_show.getModel();
                model.setNumRows(0);
                showDB();
                
            } else {
                conResult = "Database Connected Failed.";
                System.out.println(conResult);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        try {
            if (statement != null) {
                statement.close();
                connection.close();
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    public void insertDB() {
        try {
            String pgroup = txt_group.getText().trim();
            String pcode = txt_idproduct.getText().trim();
            String pdesc = txt_nameproduct.getText().trim();
            Double price = Double.parseDouble(txt_priceproduct.getText().trim().replace(",", ""));
            String p_vat = null;
            String p_service = null;
            if (rdo_pasri.isSelected()) {
                p_vat = "Y";
            } else if (rdo_nopasri.isSelected()) {
                p_vat = "N";
            }
            if (rdo_service.isSelected()) {
                p_service = "Y";
            } else if (rdo_noservice.isSelected()) {
                p_service = "N";
            }

            Class.forName(db.cl);
            connection = DriverManager.getConnection(db.co);
            if (connection != null) {
                statement = connection.createStatement();
                String sqlinsert = "INSERT INTO product (pcode,pdesc,price,p_vat,p_service,pgroup) VALUES('" + pcode + "','" + pdesc + "','" + price + "','" + p_vat + "','" + p_service + "','" + pgroup + "')";
                statement.execute(sqlinsert);
                AlertSuc("บันทึกสำเร็จ");
                clear();
                DefaultTableModel model = (DefaultTableModel) tb_show.getModel();
                model.setNumRows(0);
                showDB();

            } else {
                conResult = "Database Connected Failed.";
                System.out.println(conResult);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        try {
            if (statement != null) {
                statement.close();
                connection.close();
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    public void deleteDB() {
        if (txt_idproduct.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "กรุณาดับเบิ้ลคลิกแถวที่จะลบ", "Warning Message ....... ", JOptionPane.WARNING_MESSAGE);
        } else {
            String pcode = txt_idproduct.getText().trim();
            System.out.println(pcode);
            try {
                Class.forName(db.cl);
                connection = DriverManager.getConnection(db.co);
                if (connection != null) {
                    statement = connection.createStatement();
                    String sql = "DELETE FROM product WHERE pcode = '" + pcode + "' ";
                    statement.execute(sql);
                    AlertSuc("ลบรายการสำเร็จ");
                    //ลบตารางทั้งหมด
                    DefaultTableModel model = (DefaultTableModel) tb_show.getModel();
                    model.setNumRows(0);
                    //เรียกฟังก์ชั่นให้แสดงข้อมูลจาก db อีกรอบ
                    showDB();
                } else {
                    conResult = "Database Connected Failed.";
                    System.out.println(conResult);
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
            try {
                if (statement != null) {
                    statement.close();
                    connection.close();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
        }
    }
    public void setTable(){
        //ตั้งค่าตาราง
        DefaultTableCellRenderer tb_showset_c2 = new DefaultTableCellRenderer();
        tb_showset_c2.setHorizontalAlignment(JLabel.RIGHT);
        tb_show.getColumnModel().getColumn(2).setCellRenderer(tb_showset_c2);
    }
    public void showDB() {
        try {
            Class.forName(db.cl);
            connection = DriverManager.getConnection(db.co);
            if (connection != null) {
                statement = connection.createStatement();
                String sql = "SELECT * FROM product";
                ResultSet rs = statement.executeQuery(sql);
                while (rs != null && rs.next()) {
                    Vector row = new Vector();
                    row.add(rs.getString("pcode"));
                    row.add(rs.getString("pdesc"));
                    row.add(df.format(Double.parseDouble(rs.getString("price"))));
                    row.add(rs.getString("p_vat"));
                    row.add(rs.getString("p_service"));
                    row.add(rs.getString("pgroup"));
                    DefaultTableModel model = (DefaultTableModel) tb_show.getModel();
                    model.addRow(row);
                }
            } else {
                conResult = "Database Connected Failed.";
                System.out.println(conResult);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        try {
            if (statement != null) {
                statement.close();
                connection.close();
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    public void clear() {
        txt_idproduct.setText("");
        txt_nameproduct.setText("");
        txt_priceproduct.setText("");
        rdo_nopasri.setSelected(false);
        rdo_noservice.setSelected(false);
        rdo_service.setSelected(true);
        rdo_pasri.setSelected(true);
        txt_idproduct.setEnabled(true);
        txt_group.setText("");
 
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductMFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductMFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductMFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductMFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new ProductMFrame().setVisible(true);
                ProductMLoginFrame dl = new ProductMLoginFrame();
                dl.setVisible(true);

            }
        });
    }

    public void AlertWarning(String msg) {
        JOptionPane.showMessageDialog(null, msg, "Warning Message ....... ", JOptionPane.WARNING_MESSAGE);
    }

    public void AlertSuc(String msg) {
        JOptionPane.showMessageDialog(null, msg, "Information Message ....... ", JOptionPane.INFORMATION_MESSAGE);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    public javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_print;
    public javax.swing.JButton btn_save;
    private javax.swing.JButton btn_save3;
    private javax.swing.JButton btn_showgroup;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_head;
    private javax.swing.JRadioButton rdo_nopasri;
    private javax.swing.JRadioButton rdo_noservice;
    private javax.swing.JRadioButton rdo_pasri;
    private javax.swing.JRadioButton rdo_service;
    private javax.swing.JTable tb_show;
    private javax.swing.JTextField txt_group;
    private javax.swing.JTextField txt_idproduct;
    private javax.swing.JTextField txt_nameproduct;
    private javax.swing.JTextField txt_priceproduct;
    // End of variables declaration//GEN-END:variables

}
